The ``add_integer`` module
======================

Using ``add_integer``
-------------------

Importing Module

    >>> add_integer = __import__("0-add_integer").add_integer

Checking module Docstring

    >>> c = __import__("0-add_integer").__doc__
    >>> len(c) > 1
    True
    
Testing normal arguments

    >>> add_integer(2, 6)
    8

Testing negative arguments

    >>> add_integer(6, -2)
    4

Testing assigned numbers b = 98

    >>> add_integer(2)
    100

Testing Empty args
    >>> add_integer()
    Traceback (most recent call last):
    ...
    TypeError: add_integer() missing 1 required positional argument: 'a'

Testing String type args for a
    >>> add_integer("ALX", 8)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

Testing String type args for b
    >>> add_integer(19, "ALX")
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

Testing float type args
    >>> add_integer(19.8, 1)
    20

Testing more than two args 
    >>> add_integer(16, 3,1)
    Traceback (most recent call last):
    ...
    TypeError: too many arguments

Testing String type args for b
    >>> add_integer(19, "ALX")
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

Testing float  overflow
    >>> add_integer(1, float('infin'))
	Traceback (most recent call last):
	...
	TypeError: a must be an integer

Testing Nan
	 >>> add_integer(1, float('nan'))
	 Traceback (most recent call last):
	 ...
	 TypeError: a must be an integer

Testing Nan Nan
    >>> add_integer(None, None)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer
